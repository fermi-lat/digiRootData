<HTML>
<HEAD>
<META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<META NAME="Generator" CONTENT="Microsoft FrontPage 4.0">
<TITLE>ROOTWriter HowTo</TITLE>
<META NAME="Template" CONTENT="C:\Program Files\Microsoft Office\Office\html.dot">
</HEAD>
<BODY LINK="#0000ff" VLINK="#800080" BGCOLOR="#ccffff">

<B><FONT SIZE=5><P ALIGN="CENTER">digiRootData</P>

</B></FONT>
<blockquote>
  <blockquote>
    <P align="center"><A HREF="#Intro">Introduction</A>&nbsp;&nbsp;&nbsp;<a href="#Class Overview">Class
    Overview</a>&nbsp;&nbsp;&nbsp; <a href="#Event">Event</a>&nbsp;&nbsp;&nbsp; <a href="#ACD/XGT">ACD</a>&nbsp;&nbsp;&nbsp;
    <a href="#CAL">CAL</a>&nbsp;&nbsp;&nbsp; <a href="#TKR">TKR</a>&nbsp;&nbsp;&nbsp;<a href="#L1T">L1T</a>&nbsp;&nbsp;&nbsp;
    <a href="#LiveTime">LiveTime</a>&nbsp;&nbsp;&nbsp;&nbsp; <A HREF="#Bugs">Known
    Issues</A></P>
  </blockquote>
</blockquote>

<B><P ALIGN="JUSTIFY"><A NAME="Intro">Introduction:</P>
</A>
</B><P ALIGN="JUSTIFY">This package contains the definition of our digitization
Root classes.&nbsp; These classes were originally defined for the GLAST 1999
beamtest.&nbsp; The package was called TBEvent at that time.</P>
<P ALIGN="JUSTIFY"><b><a name="Class Overview">Class Overview</a></b></P>
<P ALIGN="JUSTIFY">The top-level class is called <i>Event </i>this class
contains the data for one event.&nbsp; Each subsystem's subpacket in the real
data stream is comprised of a &quot;header&quot; followed by detector
data.&nbsp; The header classes are named:&nbsp; <i>AcdHeader, CalHeader,
TkrHeader.&nbsp; </i>The detector data for each subsystems is stored in a
separate data array.&nbsp; The ACD data is stored in an array of <i>AcdTile</i>
objects, as is the XGT data.&nbsp; The CAL data is stored as an array of <i>CalLog</i>
objects.&nbsp; The TKR data is stored as an array of <i>TkrLayer</i> objects -
where each <i>TkrLayer</i> contains a list of hit <i>StripId</i>s.&nbsp; The
Level One Trigger data is stored in a class called <i>L1T</i>.&nbsp; The data
from the Live Time counters are stored in a class called <i>LiveTime</i>.</P>
<P ALIGN="JUSTIFY"><b><a name="Event">Event</a></b></P>
<table border="1" width="100%" height="123">
  <tr>
    <td width="16%" height="19">
      <p align="center"><b><i>Event</i> Method</b></td>
    <td width="36%" height="19">
      <p align="center"><b>Description</b></td>
    <td width="8%" height="19">
      <p align="center"><b>Returns</b></td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getAcdHeader( )</i></td>
    <td width="37%" height="19">returns the ACD Header data</td>
    <td width="28%" height="19">AcdHeader*</td>
  </tr>
  <tr>
    <td width="35%" height="17"><i>getCalHeader( )</i></td>
    <td width="37%" height="17">returns the CAL Header data</td>
    <td width="28%" height="17">CalHeader*</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getTkrHeader( )</i></td>
    <td width="37%" height="19">returns the TKR Header data</td>
    <td width="28%" height="19">TkrHeader*</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getAcdDigi( )</i></td>
    <td width="37%" height="19">returns the whole TClonesArray of ACD data<br>
      <font size="2" color="#FF0000">Note:&nbsp; One may use getAcdTile( ) to
      retrieve data for one specific AcdTile.</font></td>
    <td width="28%" height="19">TClonesArray*</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getCalDigi( )</i></td>
    <td width="37%" height="19">returns the whole TClonesArray of CalLogs&nbsp;<br>
      <font size="2" color="#FF0000">Note:&nbsp; One may use getCalLog( ) to
      retrieve data for one specific CalLog</font></td>
    <td width="28%" height="19">TClonesArray*</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getTkrDigi( )</i></td>
    <td width="37%" height="19">returns the TObjArray of TkrLayers<br>
      <font size="2" color="#FF0000">Note:&nbsp; One may use getTkrLayer( ) to
      retrieve data for one specific TkrLayer</font></td>
    <td width="28%" height="19">TObjArray*</td>
  </tr>
  <tr>
    <td width="35%" height="19">getXgtDigi( )</td>
    <td width="37%" height="19">returns the TClonesArray of XGT data<br>
      <font size="2" color="#FF0000">Note:&nbsp; One may use getXgt( ) to
      retrieve data for one specific XGT</font></td>
    <td width="28%" height="19">TClonesArray*</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getAcdTile(<font size="2">int id</font> )</i></td>
    <td width="37%" height="19">User provides an ACD id in base 10, and the
      AcdTile object is returned if it exists in the data array</td>
    <td width="28%" height="19"><i>AcdTile</i>* or null, if not found</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getAcdTile(<font size="2">int l, int f, int
      r, int c </font>)</i></td>
    <td width="37%" height="19">User provides the layer, face, row, column to
      identify the ACD/XGT, and the <i>AcdTile</i> object is returned, if it
      exists in the data array</td>
    <td width="28%" height="19"><i>AcdTile</i>* or null, if not found</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getAcdTile(<font size="2">AcdId id</font> )</i></td>
    <td width="37%" height="19">User provides an <i>AcdId</i>, and the method
      returns the <i>AcdTile</i> object, if it exists in the data array</td>
    <td width="28%" height="19"><i>AcdTile</i>* or null, if not found</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getCalLog(<font size="2">LogId id</font> )</i></td>
    <td width="37%" height="19">User provides a LogId, and the corresponding <i>CalLog</i>
      object is returned if it exists in the data array.</td>
    <td width="28%" height="19"><i>CalLog</i>* or null, if not found</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getCalLog(<font size="2">int t, int l, int c</font>)</i></td>
    <td width="37%" height="19">User provides the tower, layer, and column
      numbers, and the corresponding <i>CalLog </i>object is returned if it
      exists in the data array</td>
    <td width="28%" height="19"><i>CalLog</i>* or null, if not found</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getTkrLayer( <font size="2">int layerNum</font>
      )</i></td>
    <td width="37%" height="19">User provides a layer number, and the
      corresponding <i>TkrLayer</i> object is returned if it exists in the data
      array.</td>
    <td width="28%" height="19"><i>TkrLayer</i>* or null, if not found</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getXgt(<font size="2">int id </font>)</i></td>
    <td width="37%" height="19">User provides an XGT id (2000,2001,2010,2011) in
      base 10, and the <i>AcdTile</i> object is returned if it exists in the
      data array</td>
    <td width="28%" height="19"><i>AcdTile</i>* or null, if not found</td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getLiveTime( )</i></td>
    <td width="37%" height="19">returns the Live Time counter data</td>
    <td width="28%" height="19"><i>LiveTime*</i></td>
  </tr>
  <tr>
    <td width="35%" height="19"><i>getL1T( )</i></td>
    <td width="37%" height="19">returns the Level One Trigger data</td>
    <td width="28%" height="19"><i>L1T</i>*</td>
  </tr>
</table>
<P ALIGN="JUSTIFY"><b><a name="ACD/XGT">ACD/XGT</a></b></P>
<table border="1" width="100%">
  <tr>
    <td width="14%">
      <p align="center"><b><i>AcdTile</i> Method</b></td>
    <td width="32%">
      <p align="center"><b>Description</b></td>
    <td width="14%">
      <p align="center"><b>Returns</b></td>
  </tr>
  <tr>
    <td width="14%"><i>getId( )</i></td>
    <td width="32%">returns the AcdId object for this ACD/XGT</td>
    <td width="14%" align="center"><i>AcdId*</i></td>
  </tr>
  <tr>
    <td width="14%"><i>getPulseHeight( )</i></td>
    <td width="32%">returns the PHA value for this ACD/XGT</td>
    <td width="14%" align="center">0 -&nbsp;</td>
  </tr>
  <tr>
    <td width="14%"><i>getCNO( )</i></td>
    <td width="32%">returns 1/0 denoting whether or not this ACD/XGT was over
      high (CNO) threshold</td>
    <td width="14%" align="center">0 (not over threshold)<br>
      1 (over threshold)</td>
  </tr>
  <tr>
    <td width="14%"><i>getVeto( )</i></td>
    <td width="32%">returns whether or not the ACD/XGT was over threshold</td>
    <td width="14%" align="center">0 (not over threshold)<br>
      1 (over threshold)</td>
  </tr>
</table>
<p>&nbsp;</p>
<table border="1" width="100%">
  <tr>
    <td width="6%">
      <p align="center"><b><i>AcdId</i> Method</b></td>
    <td width="51%">
      <p align="center"><b>Description</b></td>
    <td width="3%">
      <p align="center"><b>Range</b></td>
  </tr>
  <tr>
    <td width="25%"><i>getId(<font size="2">short base=10 </font>)</i></td>
    <td width="52%">returns the Id of this AcdId, either in base 10 or base 2,
      the default is base 10.</td>
    <td width="23%" align="center">0 - 2011 (base 10)</td>
  </tr>
  <tr>
    <td width="25%"><i>getLayer( )</i></td>
    <td width="52%">returns the layer number for this AcdId, based on the Ritz
      numbering convention.</td>
    <td width="23%" align="center">0-2</td>
  </tr>
  <tr>
    <td width="25%"><i>getFace( )</i></td>
    <td width="52%">returns the face number for this AcdId, based on the Ritz
      numbering convention.</td>
    <td width="23%" align="center">0-4</td>
  </tr>
  <tr>
    <td width="25%"><i>getRow( )</i></td>
    <td width="52%">returns the row number for this AcdId, based on the Ritz
      numbering convention.</td>
    <td width="23%" align="center">&nbsp;</td>
  </tr>
  <tr>
    <td width="25%"><i>getColumn( )</i></td>
    <td width="52%">returns the column number for this AcdId, based on the Ritz
      numbering convention.</td>
    <td width="23%" align="center">&nbsp;</td>
  </tr>
  <tr>
    <td width="25%"><i>isTop( )</i></td>
    <td width="52%">returns true if this ACD/XGT is located at the top of the
      instrument</td>
    <td width="23%" align="center">true/false</td>
  </tr>
  <tr>
    <td width="25%"><i>isSide( )</i></td>
    <td width="52%">returns true if this ACD is located on the side</td>
    <td width="23%" align="center">true/false</td>
  </tr>
</table>
<P ALIGN="JUSTIFY"><b><a name="CAL">CAL</a></b></P>
<table border="1" width="100%" height="125">
  <tr>
    <td width="22%" height="19">
      <p align="center"><b><i>CalLog</i> Method</b></td>
    <td width="32%" height="19">
      <p align="center"><b>Description</b></td>
    <td width="6%" height="19">
      <p align="center"><b>Returns</b></td>
  </tr>
  <tr>
    <td width="41%" height="19"><i>getLogId( )</i></td>
    <td width="33%" height="19">returns the LogId</td>
    <td width="26%" height="19">LogId*</td>
  </tr>
  <tr>
    <td width="41%" height="19"><i>getAdc(<font size="2">LogFace face, int index</font>
      )</i></td>
    <td width="33%" height="19">returns the ADC value for a specific LogFace
      (POS = 0, NEG = 1) and index (for the BFEM index = [0,3]</td>
    <td width="26%" height="19">0 - 4095</td>
  </tr>
  <tr>
    <td width="41%" height="19"><i>getAdcSelectedRange(<font size="2">LogFace
      face, AdcRange range</font> )</i></td>
    <td width="33%" height="19">returns the ADC value for a LogFace (POS = 0,
      NEG=1, and AdcRange (</td>
    <td width="26%" height="19">0 - 4095</td>
  </tr>
  <tr>
    <td width="41%" height="19"><i>getRange(<font size="2">LogFace face, int
      index </font>)</i></td>
    <td width="33%" height="19">returns the range for a given LogFace (POS = 0,
      NEG = 1) and index=[0,3] for BFEM</td>
    <td width="26%" height="19">LowEnX4 = 0<br>
      LowEnX1 = 1<br>
      HiEnX8 = 2<br>
            HiEnX1 = 3</td>
  </tr>
  <tr>
    <td width="41%" height="19"><i>getMode( )</i></td>
    <td width="33%" height="19">returns the readout mode for this CalLog</td>
    <td width="26%" height="19">       BESTRANGE = 0<br>
            ALLRANGE = 2<br>
      <font color="#FF0000" size="2">NOTE:&nbsp; BFEM uses ALLRANGE</font></td>
  </tr>
</table>
<p>&nbsp;</p>
<table border="1" width="100%">
  <tr>
    <td width="14%" height="19">
      <p align="center"><b><i>LogId</i> Method</b></td>
    <td width="32%" height="19">
      <p align="center"><b>Description</b></td>
    <td width="14%" height="19">
      <p align="center"><b>Returns</b></td>
  </tr>
  <tr>
    <td width="33%"><i>getId( )</i></td>
    <td width="33%">returns the unique id, constructed using the Tower, Layer,
      and Column.</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getTower( )</i></td>
    <td width="33%">returns the tower number</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getLayer( )</i></td>
    <td width="33%">returns the layer number of this <i>LogId</i></td>
    <td width="34%">0 - 7, assigned according to the standard Ritz numbering
      convention, where layer 0 is closest to the TKR.</td>
  </tr>
  <tr>
    <td width="33%"><i>getColumn( )</i></td>
    <td width="33%">returns the column number of this <i>LogId</i></td>
    <td width="34%">0 - 9 for the BFEM, assigned according to the standard
      numbering convention, where&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getXY( )</i></td>
    <td width="33%">returns the orientation of the layer, where X = 0, denotes a
      layer that is oriented along the x-axis, measures Y and Y = 1 denotes a
      layer that is oriented along the y-axis, measures X.</td>
    <td width="34%">0 - measures Y
      <p>1 - measures X</td>
  </tr>
</table>
<P ALIGN="JUSTIFY"><b><a name="TKR">TKR</a></b></P>
<table border="1" width="100%">
  <tr>
    <td width="14%">
      <p align="center"><b><i>TkrLayer</i> Method</b></td>
    <td width="32%">
      <p align="center"><b>Description</b></td>
    <td width="14%">
      <p align="center"><b>Returns</b></td>
  </tr>
  <tr>
    <td width="33%"><i>getLayerNum( )</i></td>
    <td width="33%">returns the layer number of this TkrLayer - num</td>
    <td width="34%">0 -<br>
      0th layer is the back-most layer, closest to the CAL.</td>
  </tr>
  <tr>
    <td width="33%"><i>getPlaneNum( )</i></td>
    <td width="33%">returns the plane number, where plane refers to an XY pair.</td>
    <td width="34%">0 -&nbsp;<br>
      0th plane is the back-most plane, closest to the CAL.</td>
  </tr>
  <tr>
    <td width="33%"><i>getXY( )</i></td>
    <td width="33%">returns the orientation of the layer</td>
    <td width="34%">X=0, measures X<br>
      Y=1, measures Y</td>
  </tr>
  <tr>
    <td width="33%"><i>getStrips( )</i></td>
    <td width="33%">returns the TObjArray of StripIds</td>
    <td width="34%">TObjArray*</td>
  </tr>
  <tr>
    <td width="33%"><i>getHit( int i )</i></td>
    <td width="33%">returns the ith StripId</td>
    <td width="34%">StripId</td>
  </tr>
  <tr>
    <td width="33%"><i>getNumHits( )</i></td>
    <td width="33%">returns the number of hit strips in this TkrLayer</td>
    <td width="34%">0 - 1599</td>
  </tr>
  <tr>
    <td width="33%"><i>getTot(int cntrlNum )</i></td>
    <td width="33%">return the Time Over Threshold for either the left(0) or
      right(1) controller</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getErrf( )</i></td>
    <td width="33%">&nbsp;</td>
    <td width="34%">&nbsp;</td>
  </tr>
</table>
<p>&nbsp;</p>
<table border="1" width="100%">
  <tr>
    <td width="14%">
      <p align="center"><b><i>StripId</i> Method</b></td>
    <td width="32%">
      <p align="center"><b>Description</b></td>
    <td width="14%">
      <p align="center"><b>Returns</b></td>
  </tr>
  <tr>
    <td width="33%"><i>getId( )</i></td>
    <td width="33%">id for this Silicon Strip&nbsp;</td>
    <td width="34%">0 - 1599</td>
  </tr>
  <tr>
    <td width="33%"><i>getController( )</i></td>
    <td width="33%">&nbsp;</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getTag( )</i></td>
    <td width="33%">&nbsp;</td>
    <td width="34%">&nbsp;</td>
  </tr>
</table>
<P ALIGN="JUSTIFY"><b><a name="L1T">L1T</a></b></P>
<table border="1" width="100%">
  <tr>
    <td width="14%">
      <p align="center"><b><i>L1T</i> Method</b></td>
    <td width="32%">
      <p align="center"><b>Description</b></td>
    <td width="14%">
      <p align="center"><b>Returns</b></td>
  </tr>
  <tr>
    <td width="33%"><i>getTrigCount( )</i></td>
    <td width="33%">Event Id - counts number of triggers seen</td>
    <td width="34%">32 bit unsigned integer</td>
  </tr>
  <tr>
    <td width="33%"><i>getTrigTime( )</i></td>
    <td width="33%">L1T time - time the event occurred in 50 ns increments since
      the last counter reset.</td>
    <td width="34%">32 bit unsigned integer</td>
  </tr>
  <tr>
    <td width="33%"><i>getXCapture( )</i></td>
    <td width="33%">X TKR layers causing triggers</td>
    <td width="34%">32 bit integer</td>
  </tr>
  <tr>
    <td width="33%"><i>getYCapture( )</i></td>
    <td width="33%">Y TKR layers causing triggers</td>
    <td width="34%">32 bit integer</td>
  </tr>
  <tr>
    <td width="33%"><i>getDeadTime( )</i></td>
    <td width="33%">amount of time the TKR is dead due to readout or busy
      conditions</td>
    <td width="34%">16 bit unsigned short - where the first 13 bits represent
      the dead time</td>
  </tr>
  <tr>
    <td width="33%"><i>getDeadTimeCause( )</i></td>
    <td width="33%">Notes which conditions led to the dead time</td>
    <td width="34%">unsigned character</td>
  </tr>
  <tr>
    <td width="33%"><i>getDeadTimeAndCause( )</i></td>
    <td width="33%">Returns a word containing the dead time, dead time cause and
      MISC capture values.<br>
      Organized as:<br>
      MISC&nbsp;&nbsp;&nbsp;&nbsp; Dead&nbsp;&nbsp; Dead<br>
      Capture&nbsp; Cause&nbsp; Time<br>
      8 bits&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bits&nbsp;&nbsp;&nbsp; 16 bits</td>
    <td width="34%">32 bit unsigned integer</td>
  </tr>
</table>
<p ALIGN="JUSTIFY">For additional information about the l1te subpacket <a href="http://www-glast.slac.stanford.edu/software/balloon/analysis/L1T/l1te_subpacket.htm">see
this page</a>.</p>
<p ALIGN="JUSTIFY"><b><a name="LiveTime">LiveTime</a></b></p>
<table border="1" width="100%">
  <tr>
    <td width="33%" align="center"><b><i>LiveTime</i> Method</b></td>
    <td width="33%" align="center"><b>Description</b></td>
    <td width="34%" align="center"><b>Returns</b></td>
  </tr>
  <tr>
    <td width="33%"><i>getL1TCount( )</i></td>
    <td width="33%">event id - the number of triggers seen during this run</td>
    <td width="34%">0 - ?</td>
  </tr>
  <tr>
    <td width="33%"><i>getL1TTime( )</i></td>
    <td width="33%">32 bits of a 48 bit word representing the L1T time, 50 ns
      FPGA clock pulses without interruption.</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getL1TTimeOverFlow( )</i></td>
    <td width="33%">16 bits of the 48 bit word representing the L1T Time</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getPPSCount( )</i></td>
    <td width="33%">number of GPS receiver pulse-per-second (PPS) pulses since
      power on.</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getPPSTime( )</i></td>
    <td width="33%">32 bits of a 48 bit word representing the L1T time latched
      at the rising edge of the GPS receiver PPS signal</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getPPSTimeOverFlow( )</i></td>
    <td width="33%">16 bits of a 48 bit word representing the L1T time latched
      at the rising edge of the GPS receiver PPS signal</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getLiveTime( )</i></td>
    <td width="33%">32 bits of the 48 bit word representing the live time, 50 ns
      FPGA clock pulses while the L1T Enable is high AND Level-1 Trigger is
      high.&nbsp; The count value is held between runs.</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getLiveTimeOverFlow( )</i></td>
    <td width="33%">16 bits of the 48 bit word representing the live time</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getRunTime( )</i></td>
    <td width="33%">32 bits of the 48 bit word representing the run time, 50 ns
      FPGA clock pulses continuously while L1T enable is high, indicating a run
      is in progress.&nbsp; The count value is held between runs.</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getRunTimeOverFlow( )</i></td>
    <td width="33%">16 bits of the 48 bit word representing the run time</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getRunCount( )</i></td>
    <td width="33%">run number</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getTREQCapture()</i></td>
    <td width="33%">&nbsp;</td>
    <td width="34%">&nbsp;</td>
  </tr>
  <tr>
    <td width="33%"><i>getLTCDeadWord()</i></td>
    <td width="33%">&nbsp;</td>
    <td width="34%">&nbsp;</td>
  </tr>
</table>
<p ALIGN="JUSTIFY"><B><A NAME="Bugs">Known Issues:</A>
</B></p>
<ul>
  <li>
    <p ALIGN="JUSTIFY">When compiling digiRootData on Windows, warning messages
    are generated:<br>
    <font size="2"><i>warning C4291: 'void *__cdecl TObject::operator
    new(unsigned int,void *)' : no matching operator delete found; memory will
    not be freed if initialization throws an exception d:\extlib/ROOT/3.00.06/include\TObject.h(159)
    : see declaration of 'new'<br>
    </i></font>This occurs due to our use of TClonesArray, which is filled via a
    call to &quot;new with placement&quot;.&nbsp; This is a small bug in the
    version of Root 3.00.06 that we are using.&nbsp; It should have no effect on
    us, as this is only a problem if an exception is thrown during the call to
    new..i.e. if this throws an exception...there are bigger problems roaming
    about.&nbsp; The bug in Root has been fixed as of Root 3.01.02.</li>
</ul>
</BODY>
</HTML>
