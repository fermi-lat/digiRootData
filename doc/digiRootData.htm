<html>
    <head>
        <title>Workbook : digiRootData</title>
	    <link rel="stylesheet" href="styles/site.css" type="text/css" />
        <META http-equiv="Content-Type" content="text/html; charset=UTF-8">	    
    </head>

    <body>
	    <table class="pagecontent" border="0" cellpadding="0" cellspacing="0" width="100%" bgcolor="#ffffff">
		    <tr>
			    <td valign="top" class="pagebody">
				    <div class="pageheader">
					    <span class="pagetitle">
                            Workbook : digiRootData
                                                    </span>
				    </div>
				    <div class="pagesubheading">
					    This page last changed on Oct 13, 2004 by <font color="#0050B2">heather</font>.
				    </div>

				    <p class="paragraph"><a name="digiRootData-top"></a><b class="strong">Note:</b> The digiRootData package contains the definition of the digitization ROOT classes. Originally, these classes were defined for the 1999 GLAST beamtest (TBEvent), and they have undergone a number of mutations since then. The current form of digi data is described in this document.</p>The top-level class is called DigiEvent and contains the data for one event:<br/>

<ul class="star">
<li> Event ID and Run ID</li>
</ul>
<ul class="star">
<li> Time Stamp - note the various methods available for MC simulation data versus real LDF data</li>
</ul>
<ul class="star">
<li> MC Flag denoting whether or not this event was generated using the Monte Carlo simulation</li>
</ul>
<ul class="star">
<li> ACD data is stored in collection of AcdDigi objects. <br/>
where each AcdDigi represents on ACD detector (tile or ribbon) consisting of 2 PMTs
</li>
</ul>
<ul class="star">
<li> CAL data is stored as an collection of CalDigi objects. </li>
</ul>
<ul class="star">
<li> TKR data is stored as a collection of TkrDigi objects<br/>
where each TkrDigi contains a list of hit strips for a particular layer in the TKR.
</li>
</ul>
<ul class="star">
<li> Level One Trigger data is stored in a class called L1T.</li>
</ul>
<ul class="star">
<li> GEM data (real data only)</li>
</ul>
<ul class="star">
<li> Event Summary (currently for real data only)</li>
</ul>
<ul class="star">
<li> CAL Diagnostic Trigger Primitives (real data only)</li>
</ul>
<ul class="star">
<li> TKR Diagnostic Trigger Primitives (real data only)</li>
</ul><br/>
Detector data for each subsystem is stored in a separate data collection.<p class="paragraph"><h2 class="heading2"><a name="digiRootData-Digi+Tree"> Digi Tree</a></h2></p>The Digi tree has <em class="emphasis">one</em> main branch, <a href="digiRootData.html#WB-digiRootData-DigiEvent" title="DigiEvent on digiRootData">DigiEvent</a>.  All of the Digitization data is contained within this branch.<br/>

<div align="center"><img src="images/digiTree.gif" border="0"  /></div><p class="paragraph"><h2 class="heading2"><a name="digiRootData-DigiEvent+%3Ca+name%3D%22digiRootDataDigiEvent%22%3E%3C%2Fa%3E"> DigiEvent <a name="digiRootData-DigiEvent"></a></a></h2></p><table class="wikitable">
<tr>
<td> </td><th><b class="strong">Summary Data</b></th><th> </th>
</tr><tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getEventId( )</td><td>Returns the Event Id</td><td>UInt_t</td>
</tr><tr>
<td>getRunId( )</td><td>Returns the Run Id</td><td>UInt_t</td>
</tr><tr>
<td>getL1T( )</td><td>Returns the Level One Trigger</td><td>const <a href="digiRootData.html#WB-digiRootData-L1T" title="L1T on digiRootData">L1T</a>&amp;</td>
</tr><tr>
<td>getTimeStamp( )</td><td>Time in seconds, since mission start, currently 1/1/2001. This is the time that is reported when doing simulations.</td><td>Double_t</td>
</tr><tr>
<td>getEbfTimeSec( )</td><td>Returns the number of seconds, since 1/1/1970, used in conjunction with getEbfTimeNanoSec for a measure of absolute time. This data is only available when processing LDF data from real tests.</td><td>UInt_t</td>
</tr><tr>
<td>getEbfTimeNanoSec( )</td><td>Returns the number of nano-seconds, since 1/1/1970, used in conjunction with getEbfTimeSec for a measure of absolute time. This data is only available when processing LDF data from real tests.</td><td>UInt_t</td>
</tr><tr>
<td>getEbfUpperPpcTimeBase( )</td><td>Returns the UpperPpcTimeBase word as stored in the LDF from real tests. Used in conjunction with <em class="emphasis">getEbfLowerPpcTimeBase</em>, these words can be used to determine the spacing of real test events. Also see getEbfPpcTimeSeconds( )</td><td>UInt_t</td>
</tr><tr>
<td>getEbfLowerPpcTimeBase( )</td><td>Returns the LowerPpcTimeBase word stored in the LDF from real tests, used in conjunction with getEbfUpperPpcTimeBase, these words can be used to determine the spacing of real test events. Also see getEbfPpcTimeSeconds( )</td><td>UInt_t</td>
</tr><tr>
<td>getEbfPpcTimeSeconds( )</td><td>Uses the data words stored in the UpperPpcTimeBase and LowerPpcTimeBase to calculate seconds since power on. This time is used to determine the spacing of events - NOT as an absolute time. This is only available when processing LDF data from real tests.</td><td>Double_t</td>
</tr><tr>
<td>getEventSummaryData( )</td><td>Returns the full EventSummaryData object. This is only available when processing LDF data from real tests.</td><td>const <a href="digiRootData.html#WB-digiRootData-EventSummaryData" title="EventSummaryData on digiRootData">EventSummaryData</a>&amp;</td>
</tr><tr>
<td>getGem( )</td><td>Returns the full GEM data.  This is only available when processing LDF data from real tests.</td><td>const Gem&amp;</td>
</tr><tr>
<td>getFromMc( )</td><td>Returns a flag denoting whether or not this data originated from Monte Carlo simulation (kTRUE) or not (kFALSE)</td><td>Bool_t</td>
</tr><tr>
<td> </td><th>ACD</th><th> </th>
</tr><tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getAcdDigiCol( )</td><td>Returns the full collection of AcdDigi objects</td><td>const TClonesArray*</td>
</tr><tr>
<td>getAcdDigi(UShort layer, UShort face, UShort row, UShort col )</td><td>Returns a specific AcdDigi object identified by layer, face, row, column</td><td>const <a href="digiRootData.html#WB-digiRootData-AcdDigi" title="AcdDigi on digiRootData">AcdDigi</a>*</td>
</tr><tr>
<td>getAcdDigi(const AcdId&amp; )</td><td>Returns a specific AcdDigi object identified by its AcdId</td><td>const <a href="digiRootData.html#WB-digiRootData-AcdDigi" title="AcdDigi on digiRootData">AcdDigi</a>*</td>
</tr><tr>
<td> </td><th>CAL</th><th> </th>
</tr><tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getCalDigiCol( )</td><td>Returns the complete CalDigi collection</td><td>const TClonesArray*</td>
</tr><tr>
<td>getCalDigi(UInt_t i)</td><td>Returns a specific CalDigi object identified by its index in the TObjArray</td><td>const <a href="digiRootData.html#WB-digiRootData-CalDigi" title="CalDigi on digiRootData">CalDigi</a>*</td>
</tr><tr>
<td>getCalDiagnosticCol( )</td><td>Returns the full collection of CAL Diagnostic (trigger primitive) data - only available when processing LDF files storing real test data.</td><td>const TClonesArray*</td>
</tr><tr>
<td>getCalDiagnostic(UInt_t i )</td><td>Returns the ith CalDiagnostic (trigger primitive) object. Only available when processing LDF files storing real test data.</td><td>const <a href="digiRootData.html#WB-digiRootData-CalDiagnosticData" title="CalDiagnosticData on digiRootData">CalDiagnosticData</a>*</td>
</tr><tr>
<td> </td><th>TKR</th><th> </th>
</tr><tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getTkrDigiCol( )</td><td>Returns the complete TkrDigi collection</td><td>const TObjArray*</td>
</tr><tr>
<td>getTkrDigi( )</td><td>Returns a specific TkrDigi object identified by its index in the TObjArray</td><td>const <a href="digiRootData.html#WB-digiRootData-TkrDigi" title="TkrDigi on digiRootData">TkrDigi</a>*</td>
</tr><tr>
<td>getTkrDiagnosticCol( )</td><td>Returns the full collection of TkrDiagnostic (trigger primitive) objects. This collection is only available when processing LDF file from real test data.</td><td>const TClonesArray*</td>
</tr><tr>
<td>getTkrDiagnostic(UInt_t i)</td><td>Returns the ith TkrDiagnostic (trigger primitive) object in the collection. This collection is populated only when processing LDF files storing real test data</td><td>const <a href="digiRootData.html#WB-digiRootData-TkrDiagnosticData" title="TkrDiagnosticData on digiRootData">TkrDiagnosticData</a>*</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-EventSummaryData+%3Ca+name%3D%22digiRootDataEventSummaryData%22%3E%3C%2Fa%3E"> EventSummaryData <a name="digiRootData-EventSummaryData"></a></a></h2><p class="paragraph">This class is just an interface to the LDF Online&#039;s EventSummary class. All of the methods use the Online&#039;s methods to unpack the summary data. For a full description of the EventSummary data please see:</p><a href="http://www-glast.slac.stanford.edu/IntegrationTest/ONLINE/docs/LATcom.pdf" title="Visit page outside Confluence">&#104;ttp://www-glast.slac.stanford.edu/IntegrationTest/ONLINE/docs/LATcom.pdf</a><br/>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>summary( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>calStrobe( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>tag( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>TACK( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>readout4( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>zeroSuppress( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>marker( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>error( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>diagnostic( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>eventNumber( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>trgParityError( )</td><td>See Online Documentation LATcom.pdf</td><td>UInt_t</td>
</tr><tr>
<td>eventFlags( )</td><td>Offline addition to denote good/bad events.  GOOD = 0, BAD != 0.  Currently the only bit in the eventFlags is 1, denoting a bad eventSequence</td><td>UInt_t</td>
</tr><tr>
<td>goodEvent( )</td><td>Returns kTRUE/kFALSE depending upon value of event flags</td><td>Bool_t</td>
</tr><tr>
<td>badEvent( )</td><td>Returns kTRUE/kFALSE depending upon value of event flags</td><td>Bool_t</td>
</tr><tr>
<td>badEventSequence( )</td><td>Returns kTRUE/kFALSE depending upon whether the event sequence bit is set in event flags</td><td>Bool_t</td>
</tr><tr>
<td>eventSequence( )</td><td>returns the computed eventSequence constructed using eventNumber and tag</td><td>UInt_t</td>
</tr><tr>
<td>temLength(UInt_t item )</td><td>return length in bytes of the TEM contribution, where TEM is identified by id in 0,15</td><td>UInt_t</td>
</tr><tr>
<td>aemLength( )</td><td>returns length in bytes of the AEM contribution for this event</td><td>UInt_t</td>
</tr><tr>
<td>gemLength( )</td><td>return length in bytes of the GEM contribution for this event</td><td>UInt_t</td>
</tr><tr>
<td>oswLength( )</td><td>returns length in bytes of OSW contribution of this event</td><td>UInt_t</td>
</tr><tr>
<td>diagLength( )</td><td>returns length in bytes of the DIAGNOSTIC contribution of this event</td><td>UInt_t</td>
</tr><tr>
<td>errLength( )</td><td>returns length in bytes of the ERROR contribution of this event</td><td>UInt_t</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-L1T+%3Ca+name%3D%22digiRootDataL1T%22%3E%3C%2Fa%3E"> L1T <a name="digiRootData-L1T"></a></a></h2>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getTriggerWord( )</td><td>Returns the full trigger word</td><td>UInt_t</td>
</tr><tr>
<td>getAcdLow( )</td><td>Returns kTRUE if ACD LOW</td><td>Bool_t</td>
</tr><tr>
<td>getAcdHigh( )</td><td>Returns kTRUE is ACD HIGH</td><td>Bool_t</td>
</tr><tr>
<td>getTkr3InARow( )</td><td>Returns kTRUE if 3-in-a-row in the TKR has occurred</td><td>Bool_t</td>
</tr><tr>
<td>getCalLow( )</td><td>Returns kTRUE if CAL LOW</td><td>Bool_t</td>
</tr><tr>
<td>getCalHigh( )</td><td>Returns kTRUE if CAL HIGH</td><td>Bool_t</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-AcdDigi+%3Ca+name%3D%22digiRootDataAcdDigi%22%3E%3C%2Fa%3E"> AcdDigi <a name="digiRootData-AcdDigi"></a></a></h2>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getId( )</td><td>Returns the AcdId associated with this digi</td><td>const <a href="digiRootData.html#WB-digiRootData-AcdId" title="AcdId on digiRootData">AcdId</a>&amp;</td>
</tr><tr>
<td>getVolId( )</td><td>Returns the VolumeIdentifier associated with this digi.</td><td>const <a href="http://www-glast.slac.stanford.edu/software/gleam/userGuide/mcRoot.htm" title="Visit page outside Confluence">VolumeIdentifier</a>&</td>
</tr><tr>
<td>getPulseHeight(AcdDigi::PmtId )</td><td>Returns the PHA (Pulse Height Analysis) for this ACD detector</td><td>UShort_t</td>
</tr><tr>
<td>getVeto(AcdDigi::PmtId)</td><td>Returns kTRUE if the veto discriminator is set, returns kFALSE otherwise</td><td>Bool_t</td>
</tr><tr>
<td>get:LowDiscrim(AcdDigi::PmtId )</td><td>Returns kTRUE if the low discriminator is set, returns kFALSE otherwise</td><td>Bool_t</td>
</tr><tr>
<td>getHighDiscrim(AcdDigi::PmtId)</td><td>Returns kTRUE if the high (CNO) discriminator is set, returns kFALSE otherwise</td><td>Bool_t</td>
</tr><tr>
<td>getEnergy( )</td><td>returns the amount of Monte Carlo energy (MeV) deposited in this detector only useful for simulated data</td><td>Float_t</td>
</tr><tr>
<td>getTileNumber( )</td><td>returns as reported by LDF in real data</td><td>Int_t</td>
</tr><tr>
<td>getTileName( )</td><td>returns the string denoting the name of this tile as reported by LDF in real data</td><td>const char*</td>
</tr><tr>
<td>getRange(AcdDigi::PmtId)</td><td>Returns the range for the specified PMT (A or B) either HIGH or LOW</td><td>AcdDigi::Range</td>
</tr><tr>
<td>getParityError(AcdDigi::PmtId)</td><td>Returns the parity error bit for the specified PMT (A or B) either ERROR or NOERROR</td><td>AcdDigi::ParityError</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-AcdId+%3Ca+name%3D%22digiRootDataAcdId%22%3E%3C%2Fa%3E"> AcdId <a name="digiRootData-AcdId"></a></a></h2>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getId(Short_t base = 10 )</td><td>Returns a numerical value for the AcdId, by default in base 10.</td><td>UInt_t</td>
</tr><tr>
<td>isTop( )</td><td>Returns kTRUE if this Acd detector is on the top (Face 0) of the instrument, returns kFALSE otherwise</td><td>Bool_t</td>
</tr><tr>
<td>isSide( )</td><td>Returns kTRUE if this Acd detector is on a side (Face != 0), returns kFALSE otherwise</td><td>Bool_t</td>
</tr><tr>
<td>getLayer( )</td><td>Returns the layer number of this AcdId</td><td>UShort_t</td>
</tr><tr>
<td>getFace( )</td><td>Returns the face number 0-4</td><td>UShort_t</td>
</tr><tr>
<td>getRow( )</td><td>Returns the row number</td><td>UShort_t</td>
</tr><tr>
<td>getColumn( )</td><td>Returns the column number</td><td>UShort_t</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-CalDigi+%3Ca+name%3D%22digiRootDataCalDigi%22%3E%3C%2Fa%3E"> CalDigi <a name="digiRootData-CalDigi"></a></a></h2>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getMode( )</td><td>Returns the readout mode</td><td>CalXtalId::CalTrigMode</td>
</tr><tr>
<td>getPackedId( )</td><td>Returns the crystal id associated with this CalDigi</td><td>const <a href="digiRootData.html#WB-digiRootData-CalXtalId" title="CalXtalId on digiRootData">CalXtalId</a></td>
</tr><tr>
<td>getReadoutCol( )</td><td>Returns the full collection of CalXtalReadout objects</td><td>const TClonesArray*</td>
</tr><tr>
<td>getRange(short readoutIndex, CalXtalId::XtalFace face)</td><td>Retrieve energy range for selected face and readout</td><td>Char_t</td>
</tr><tr>
<td>getAdc(Short_t readoutIndex, CalXtalId::XtalFace face)</td><td>Retrieve pulse height for selected face and readout</td><td>Short_t</td>
</tr><tr>
<td>getXtalReadout(Short_t readoutIndex)</td><td>Retrieve ranges and pulse heights from both ends of selected readout</td><td>const <a href="digiRootData.html#WB-digiRootData-CalXtalReadout" title="CalXtalReadout on digiRootData">CalXtalReadout</a>*</td>
</tr><tr>
<td>getAdcSelectedRange(Char_t range, CalXtalId::XtalFace face)</td><td>Retrieve pulse height from selected range</td><td>Short_t</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-CalXtalId+%3Ca+name%3D%22digiRootDataCalXtalId%22%3E%3C%2Fa%3E"> CalXtalId <a name="digiRootData-CalXtalId"></a></a></h2>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getPackedId( )</td><td>Bit packed identifier for the crystal</td><td>UInt_t</td>
</tr><tr>
<td>getUnpackedId(Short_t&amp; tower, Short_t&amp; layer, Short_t&amp; column)</td><td>Unpacks the crystal id into tower, layer and column</td><td>void</td>
</tr><tr>
<td>getTower( )</td><td>Returns the tower number this crystal is associated with</td><td>Short_t</td>
</tr><tr>
<td>getLayer( )</td><td>Returns the layer associated with this crystal</td><td>Short_t</td>
</tr><tr>
<td>getColumn( )</td><td>Returns the column number associated with this crystal</td><td>Short_t</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-CalXtalReadout+%3Ca+name%3D%22digiRootDataCalXtalReadout%22%3E%3C%2Fa%3E"> CalXtalReadout <a name="digiRootData-CalXtalReadout"></a></a></h2>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getAdc(CalXtalId::XtalFace face)</td><td>Retrieve pulse height from specified face</td><td>UShort_t</td>
</tr><tr>
<td>getRange(CalXtalId::XtalFace face)</td><td>Retrieve energy range from specified face</td><td>Char_t</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-CalDiagnosticData+%3Ca+name%3D%22digiRootDataCalDiagnosticData%22%3E%3C%2Fa%3E"> CalDiagnosticData <a name="digiRootData-CalDiagnosticData"></a></a></h2><p class="paragraph">This class is just an interface to the Online&#039;s LDF CALdiagnostic class.</p><a href="http://www-glast.slac.stanford.edu/IntegrationTest/ONLINE/docs/TEM.pdf" title="Visit page outside Confluence">&#104;ttp://www-glast.slac.stanford.edu/IntegrationTest/ONLINE/docs/TEM.pdf</a><br/>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getDataWord( )</td><td>Returns the full data word for this CALdiagnostic</td><td>UInt_t</td>
</tr><tr>
<td>high(UInt_t sign )</td><td>Returns high energy trigger request value for the specified layer end: 0-Positiive, 1-Negative</td><td>UInt_t</td>
</tr><tr>
<td>low( UInt_t sign)</td><td>Returns low energy trigger request value for specified layer end: 0-Positive, 1-Negative</td><td>UInt_t</td>
</tr><tr>
<td>logAccepts(UInt_t sign )</td><td>Returns status of logaccepts lines for the specified layer end: 0-Positive, 1-Negative</td><td>UInt_t</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-GlastAxis+%3Ca+name%3D%22digiRootDataGlastAxis%22%3E%3C%2Fa%3E"> GlastAxis <a name="digiRootData-GlastAxis"></a></a></h2>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>enum axis <div class="error">Unknown macro: {X=0, Y=1, XY=2, NONE=3}</div></td><td>An enumeration that identifies orientation.</td><td> </td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-TkrDigi+%3Ca+name%3D%22digiRootDataTkrDigi%22%3E%3C%2Fa%3E"> TkrDigi <a name="digiRootData-TkrDigi"></a></a></h2>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>getTower( )</td><td>Returns the tower identifier associated with this TkrDigi</td><td><a href="digiRootData.html#WB-digiRootData-TowerId" title="TowerId on digiRootData">TowerId</a></td>
</tr><tr>
<td>getBilayer( )</td><th>UShort_t</th>
</tr><tr>
<td>getView( )</td><td>Returns the view which denotes the orientation of the strips</td><td><a href="digiRootData.html#WB-digiRootData-GlastAxis" title="GlastAxis on digiRootData">GlastAxis::axis</a></td>
</tr><tr>
<td>getLastController0Strip()</td><td>Retrieve the last strip associated with controller zero</td><td>Int_t</td>
</tr><tr>
<td>getToT(UInt_t i)</td><td>Returns the Time Over Threshold value for either controller zero or controller one - dependent upon the input parameter, i.</td><td>Int_t</td>
</tr><tr>
<td>getToTForStrip(UInt_t strip)</td><td>Returns Time Over Threshold for a given strip</td><td>Int_t</td>
</tr><tr>
<td>getNumHits( )</td><td>Returns the number of hits associated with this TkrDigi</td><td>UInt_t</td>
</tr><tr>
<td>getStrip(UInt_t i)</td><td>Returns the ith strip number</td><td>Int_t</td>
</tr><tr>
<td>getHit(UInt_t i)</td><td>Returns a specific hit identifier by its index in the collection of hits</td><td>Int_t</td>
</tr><tr>
<td>getHitCol( )</td><td>Returns the full collection of hit strips</td><td>std::vector&lt;UInt_t&gt;</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-TkrDiagnosticData+%3Ca+name%3D%22digiRootDataTkrDiagnosticData%22%3E%3C%2Fa%3E"> TkrDiagnosticData <a name="digiRootData-TkrDiagnosticData"></a></a></h2><p class="paragraph">This class is just an interface to the Online&#039;s LDF TKRdiagnostic class. We use the TKRdiagnostic class to unpack the data.</p><a href="http://www-glast.slac.stanford.edu/IntegrationTest/ONLINE/docs/TEM.pdf" title="Visit page outside Confluence">&#104;ttp://www-glast.slac.stanford.edu/IntegrationTest/ONLINE/docs/TEM.pdf</a><br/>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>dataWord( )</td><td>Returns full data word associated with this TKRdiagnostic</td><td>UInt_t</td>
</tr><tr>
<td>getGTRC( int gtrc )</td><td>Returns the state of the trigger request line for the given GTRC</td><td>UInt_t</td>
</tr>
</table>
<h2 class="heading2"><a name="digiRootData-TowerId+%3Ca+name%3D%22digiRootDataTowerId%22%3E%3C%2Fa%3E"> TowerId <a name="digiRootData-TowerId"></a></a></h2>

<table class="wikitable">
<tr>
<th>Method</th><th>Description</th><th>Return Value</th>
</tr><tr>
<td>id( )</td><td>Returns the full tower number</td><td>Int_t</td>
</tr><tr>
<td>ix( )</td><td>Returns the x-component of the tower number</td><td>Int_t</td>
</tr><tr>
<td>iy( )</td><td>Returns the y-component of the tower number</td><td>Int_t</td>
</tr><tr>
<td>neighbor (const TowerId&amp; n)</td><td>Reports whether or not a tower identifier by TowerId n is a neighbor (kTRUE) or not (kFALSE)</td><td>Bool_t</td>
</tr>
</table><br/>
<a href="digiRootData.html#WB-digiRootData-top" title="top on digiRootData">Back to Top</a>&#160;<br/>







				    					    <br/>
                        <div class="tabletitle">
                            <a name="attachments">Attachments:</a>
                        </div>

                        <div class="greybox" align="left">
                                                            <img src="icons/bullet_blue.gif" height="8" width="8" alt=""/>
                                <a href="digiRootData_attachments/digiTree.gif">digiTree.gif</a> (image/gif)
                                <br/>
                                                    </div>
				    
                    			    </td>
		    </tr>
	    </table>
	    <table border="0" cellpadding="0" cellspacing="0" width="100%">
			<tr>
				<td height="12" background="border/border_bottom.gif"><img src="border/spacer.gif" width="1" height="1" border="0"/></td>
			</tr>
		    <tr>
			    <td align="center"><font color="grey">Document generated by Confluence on Oct 13, 2004 14:12</font></td>
		    </tr>
	    </table>
    </body>
</html>